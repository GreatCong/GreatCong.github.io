<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo-tale</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-27T14:35:23.700Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何在Linux上自动设置JAVA_HOME环境变量</title>
    <link href="http://yoursite.com/2019/03/27/Linux/Linux%E8%AE%BE%E7%BD%AEjava%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2019/03/27/Linux/Linux设置java环境变量/</id>
    <published>2019-03-27T14:34:24.999Z</published>
    <updated>2019-03-27T14:35:23.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在Linux上自动设置JAVA-HOME环境变量"><a href="#如何在Linux上自动设置JAVA-HOME环境变量" class="headerlink" title="如何在Linux上自动设置JAVA_HOME环境变量"></a>如何在Linux上自动设置JAVA_HOME环境变量</h1><p>​        许多 Java 程序或基于 Java 的集成开发环境 (IDE)都需要设置好 JAVA_HOME 环境变量。该变量应指向 Java 开发工具包 (JDK)或Java 运行时环境 (JRE)的安装目录。JDK 不仅包含了 JRE 提供的一切，还带有用于编译 Java 程序的额外的二进制代码和库文件(例如编译器，调试器及 JavaDoc 文档生成器)。JDK 是用来构建 Java 程序的，如果只是运行已经构建好的 Java 程序，单独一份 JRE 就足够了。</p><p>​        当您正试图设置 JAVA_HOME 环境变量时，麻烦的事情在于 JAVA_HOME 变量需要根据以下几点而改变：</p><ol><li>您是否安装了 JDK 或 JRE;</li><li>您安装了哪个版本;</li><li>您安装的是 Oracle JDK 还是 Open JDK。</li></ol><p>因此每当您的开发环境或运行时环境发生改变(例如为 JDK 更新版本)时，您需要根据实际情况调整 JAVA_HOME 变量，而这种做法是繁重且缺乏效率的。</p><p>​       以下 export 命令能为您自动设置 JAVA_HOME 环境变量，而无须顾及上述的因素。</p><p>若您安装的是 JRE： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))</span><br></pre></td></tr></table></figure><p>若您安装的是 JDK： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))</span><br></pre></td></tr></table></figure><p>   根据您的情况，将上述命令中的一条写入 ~/.bashrc(或 /etc/profile)文件中，它就会永久地设置好 JAVA_HOME 变量。<br>   注意，由于 java 或 javac 可以建立起多个层次的符号链接，为此”readlink -f”命令是用来获取它们真正的执行路径的。<br>   举个例子，假如您安装的是 Oracle JRE 7，那么上述的第一条 export 命令将自动设JAVA_HOME 为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/jvm/java-7-oracle/jre</span><br></pre></td></tr></table></figure><p>若您安装的是 Open JDK 第8版，那么第二条 export 命令将设置 JAVA_HOME 为： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/jvm/java-8-openjdk-amd64</span><br></pre></td></tr></table></figure><p>用如下命令测试，会返回JAVA_HOME的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何在Linux上自动设置JAVA-HOME环境变量&quot;&gt;&lt;a href=&quot;#如何在Linux上自动设置JAVA-HOME环境变量&quot; class=&quot;headerlink&quot; title=&quot;如何在Linux上自动设置JAVA_HOME环境变量&quot;&gt;&lt;/a&gt;如何在Linux
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Linux学习" scheme="http://yoursite.com/tags/Linux%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>为什么要模1000000007</title>
    <link href="http://yoursite.com/2019/03/23/%E5%85%B6%E4%BB%96/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%A8%A11000000007/"/>
    <id>http://yoursite.com/2019/03/23/其他/为什么要模1000000007/</id>
    <published>2019-03-23T10:48:27.502Z</published>
    <updated>2019-03-23T10:50:06.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要模1000000007"><a href="#为什么要模1000000007" class="headerlink" title="为什么要模1000000007"></a>为什么要模1000000007</h1><ul><li>先看一下常用数据类型的数值范围（32位系统）</li></ul><table><thead><tr><th style="text-align:center">字节</th><th style="text-align:center">类型</th><th style="text-align:center">范围</th><th style="text-align:center">长度</th></tr></thead><tbody><tr><td style="text-align:center">一字节(2^8)</td><td style="text-align:center">char</td><td style="text-align:center">-128 ~ 127</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">一字节(2^8)</td><td style="text-align:center">unsigned char</td><td style="text-align:center">0 ~ 255</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">二字节(2^16)</td><td style="text-align:center">short</td><td style="text-align:center">-32768 ~ 32767</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">二字节(2^16)</td><td style="text-align:center">unsigned short</td><td style="text-align:center">0 ~ 65535</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">四字节(2^32)</td><td style="text-align:center">unsigned int</td><td style="text-align:center">0～4294967295</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">四字节(2^32)</td><td style="text-align:center">int</td><td style="text-align:center">-2147483648～2147483647</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">四字节(2^32)</td><td style="text-align:center">unsigned long</td><td style="text-align:center">0～4294967295</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">四字节(2^32)</td><td style="text-align:center">long</td><td style="text-align:center">-2147483648～2147483647</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">八字节(2^64)</td><td style="text-align:center">long long (g++)</td><td style="text-align:center">-9223372036854775808~9223372036854775807</td><td style="text-align:center">19</td></tr><tr><td style="text-align:center">八字节(2^64)</td><td style="text-align:center">unsigned long long (g++)</td><td style="text-align:center">0~18446744073709551615</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">八字节(2^64)</td><td style="text-align:center">__int64 (msvc)</td><td style="text-align:center">-9223372036854775808~9223372036854775807</td><td style="text-align:center">19</td></tr><tr><td style="text-align:center">八字节(2^64)</td><td style="text-align:center">unsigned __int64 (msvc)</td><td style="text-align:center">0~18446744073709551615</td><td style="text-align:center">20</td></tr></tbody></table><ul><li>1000000007 是最小的十位质数。模1000000007，可以保证值永远在int的范围内。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么要模1000000007&quot;&gt;&lt;a href=&quot;#为什么要模1000000007&quot; class=&quot;headerlink&quot; title=&quot;为什么要模1000000007&quot;&gt;&lt;/a&gt;为什么要模1000000007&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;先看一下常用数据类型的数
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Goclang Study（一）</title>
    <link href="http://yoursite.com/2019/03/17/GoClang/Go_Study%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/03/17/GoClang/Go_Study（一）/</id>
    <published>2019-03-17T05:16:17.986Z</published>
    <updated>2019-03-17T05:23:38.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go标准库说明"><a href="#Go标准库说明" class="headerlink" title="Go标准库说明"></a>Go标准库说明</h1><p>【unsafe】包含了一些打破Go语言“类型安全”的命令，一般的程序中不会被使用，可用在C/C++程序的调用中</p><p>【syscall】底层的外部包，提供了操作系统底层调用的基本接口</p><p>【os/exec】提供我们运行外部操作系统命令和程序的方式</p><p>【os】提供给我们一个平台无关性的操作系统功能接口，采用Unix设计，隐藏了不同操作系统间差异，让不同 的文件系统和操作系统对象表现一致</p><p>【archive/tar】【/zip-compress】压缩（解压缩文件功能）</p><p>【fmt】提供了格式化输入输出功能</p><p>【io】提供了基本输入输出功能，大多数是围绕系统功能的封装</p><p>【bufio】缓冲输入输出的封装</p><p>【path/filepath】用来操作再当前系统中的目标文件名路径</p><p>【falg】对命令行参数的操作</p><p>【strings】字符串的操作</p><p>【strconv】提供将字符串转换为基础类型的功能</p><a id="more"></a><p>【unicode】为unicode类型的字符串提供特殊的功能</p><p>【regexp】正则表达式功能</p><p>【bytes】提供对字符型分片的操作</p><p>【index/suffixarray】子字符串快速查询</p><p>【math】基本的数据函数</p><p>【math/cmath】对复数的操作</p><p>【math/rand】伪随机数生成</p><p>【sort】为数组排序和自定义集合</p><p>【math/big】大数的实现和计算</p><p>【list】双链表</p><p>【ring】环形链表</p><p>【time】日期和时间的基本操作</p><p>【log】记录程序运行时产生的日志</p><p>【encoding/json】json的相关操作</p><p>【encoding/xml】xml相关操作</p><p>【net】网络数据的基本操作</p><p>【http】提供了一个可扩展的HTTP服务器和基础客户端，解析HTTP请求和回复</p><p>【html】HTML5解析器</p><p>【runtime】Go程序运行时的交互操作，例如垃圾回收和协程创建</p><p>【reflect】实现通过程序运行时反射</p><p>完整Golang 包请<a href="https://gowalker.org/search?q=gorepos" target="_blank" rel="noopener">点击</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Go标准库说明&quot;&gt;&lt;a href=&quot;#Go标准库说明&quot; class=&quot;headerlink&quot; title=&quot;Go标准库说明&quot;&gt;&lt;/a&gt;Go标准库说明&lt;/h1&gt;&lt;p&gt;【unsafe】包含了一些打破Go语言“类型安全”的命令，一般的程序中不会被使用，可用在C/C++程序的调用中&lt;/p&gt;
&lt;p&gt;【syscall】底层的外部包，提供了操作系统底层调用的基本接口&lt;/p&gt;
&lt;p&gt;【os/exec】提供我们运行外部操作系统命令和程序的方式&lt;/p&gt;
&lt;p&gt;【os】提供给我们一个平台无关性的操作系统功能接口，采用Unix设计，隐藏了不同操作系统间差异，让不同 的文件系统和操作系统对象表现一致&lt;/p&gt;
&lt;p&gt;【archive/tar】【/zip-compress】压缩（解压缩文件功能）&lt;/p&gt;
&lt;p&gt;【fmt】提供了格式化输入输出功能&lt;/p&gt;
&lt;p&gt;【io】提供了基本输入输出功能，大多数是围绕系统功能的封装&lt;/p&gt;
&lt;p&gt;【bufio】缓冲输入输出的封装&lt;/p&gt;
&lt;p&gt;【path/filepath】用来操作再当前系统中的目标文件名路径&lt;/p&gt;
&lt;p&gt;【falg】对命令行参数的操作&lt;/p&gt;
&lt;p&gt;【strings】字符串的操作&lt;/p&gt;
&lt;p&gt;【strconv】提供将字符串转换为基础类型的功能&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="GoClang学习" scheme="http://yoursite.com/tags/GoClang%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Redis Study（三）</title>
    <link href="http://yoursite.com/2019/03/07/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2019/03/07/Redis/Redis学习（三）/</id>
    <published>2019-03-07T13:05:16.084Z</published>
    <updated>2019-03-17T05:17:28.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis学习（三）"><a href="#Redis学习（三）" class="headerlink" title="Redis学习（三）"></a>Redis学习（三）</h1><p>​        Redis与Memcached一样，为了保证效率，数据都是缓存在内存中，区别是redis会周期性地把更新的数据写入磁盘或者把修改操作写入追加的记录，并且在此基础上实现master-slave（主从）同步。</p><p>​       Redis支持主从同步，数据可以从主服务器向任意数量的从服务器同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可以单层树复制。存盘可以有意无意的对数据进行写操作。</p><h3 id="Redis与Memcached区别"><a href="#Redis与Memcached区别" class="headerlink" title="Redis与Memcached区别"></a>Redis与Memcached区别</h3><p>​        在分布式存储中，如果服务器挂掉，内存中的数据会丢失，缓存中的数据也会没有。如果考虑到服务器挂掉数据能够恢复，可以选择使用Redis，其余Memcached的优点在于服务器挂掉后重启从硬盘中恢复，因为Redis会每隔一段时间把数据同步到硬盘上。</p><ul><li>Memcached是多线程，而Redis使用单线程。</li><li>Memchached使用预分配的内存池的方式，Redis使用现场申请内存的方式来存储数据，并且可以配置虚拟内存。</li><li>Redis可以实现持久化，主从复制，实现故障恢复。</li><li>Memechached只是简单的key-value，但是Redis支持数据类型较多，包括string(字符串)、list（链表）、set（集合）、zset(sorted set – 有序集合)和hash（哈希类型，即字符串字段和字符串值之间的映射）。</li></ul><h3 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h3><p>redis支持两种持久化方式：</p><ul><li>snapshotting（快照）也是默认方式(把数据做一个备份，将数据存储到文件)</li><li>Append-only-file（aof）方式，redis重启的时候会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis学习（三）&quot;&gt;&lt;a href=&quot;#Redis学习（三）&quot; class=&quot;headerlink&quot; title=&quot;Redis学习（三）&quot;&gt;&lt;/a&gt;Redis学习（三）&lt;/h1&gt;&lt;p&gt;​        Redis与Memcached一样，为了保证效率，数据都是
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Redis学习" scheme="http://yoursite.com/tags/Redis%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Redis Study（二）</title>
    <link href="http://yoursite.com/2019/03/06/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/03/06/Redis/Redis学习（二）/</id>
    <published>2019-03-06T11:32:25.957Z</published>
    <updated>2019-03-17T05:17:34.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis学习（二）"><a href="#Redis学习（二）" class="headerlink" title="Redis学习（二）"></a>Redis学习（二）</h1><h3 id="C-使用-redis-作为缓存服务器"><a href="#C-使用-redis-作为缓存服务器" class="headerlink" title="C# 使用 redis 作为缓存服务器"></a>C# 使用 redis 作为缓存服务器</h3><p>​        利用C#自带的类库可以实现缓存。我们只要继承自 cachebase,并重写相关方法，就可以实现使用redis作为缓存服务器，在实现之前，我们先约定key值为 “n:name,c:key”来作为redis的key值，启用name为自定义的，因为可能不同的分层会使用不同的name名称，key就是需要保存的缓存项的key，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected virtual string GetLocalizedKey(string key)</span><br><span class="line">&#123;</span><br><span class="line">    return &quot;n:&quot; + &quot;RandomRedis&quot; + &quot;,c:&quot; + key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       基于上述的思想，r我们可以知道缓存其实就是一系列的 key-value，而 redis 是典型的key-value数据库之一，那么，我们是不是可以借助 redis来实现缓存呢?答案是肯定的!</p><p>​     代码参考：<a href="https://www.jianshu.com/p/f5f2a5e7ec1c" target="_blank" rel="noopener">https://www.jianshu.com/p/f5f2a5e7ec1c</a></p><a id="more"></a><h3 id="补充概念"><a href="#补充概念" class="headerlink" title="补充概念"></a>补充概念</h3><p>分布式与集群的区别（<a href="http://www.cnblogs.com/aspirant/p/5697807.html）" target="_blank" rel="noopener">http://www.cnblogs.com/aspirant/p/5697807.html）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redis学习（二）&quot;&gt;&lt;a href=&quot;#Redis学习（二）&quot; class=&quot;headerlink&quot; title=&quot;Redis学习（二）&quot;&gt;&lt;/a&gt;Redis学习（二）&lt;/h1&gt;&lt;h3 id=&quot;C-使用-redis-作为缓存服务器&quot;&gt;&lt;a href=&quot;#C-使用-redis-作为缓存服务器&quot; class=&quot;headerlink&quot; title=&quot;C# 使用 redis 作为缓存服务器&quot;&gt;&lt;/a&gt;C# 使用 redis 作为缓存服务器&lt;/h3&gt;&lt;p&gt;​        利用C#自带的类库可以实现缓存。我们只要继承自 cachebase,并重写相关方法，就可以实现使用redis作为缓存服务器，在实现之前，我们先约定key值为 “n:name,c:key”来作为redis的key值，启用name为自定义的，因为可能不同的分层会使用不同的name名称，key就是需要保存的缓存项的key，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;protected virtual string GetLocalizedKey(string key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;quot;n:&amp;quot; + &amp;quot;RandomRedis&amp;quot; + &amp;quot;,c:&amp;quot; + key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​       基于上述的思想，r我们可以知道缓存其实就是一系列的 key-value，而 redis 是典型的key-value数据库之一，那么，我们是不是可以借助 redis来实现缓存呢?答案是肯定的!&lt;/p&gt;
&lt;p&gt;​     代码参考：&lt;a href=&quot;https://www.jianshu.com/p/f5f2a5e7ec1c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/f5f2a5e7ec1c&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Redis学习" scheme="http://yoursite.com/tags/Redis%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Redis Study（一）</title>
    <link href="http://yoursite.com/2019/03/06/Redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/03/06/Redis/Redis学习（一）/</id>
    <published>2019-03-06T10:54:50.992Z</published>
    <updated>2019-03-17T05:17:17.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis学习（一）"><a href="#Redis学习（一）" class="headerlink" title="Redis学习（一）"></a>Redis学习（一）</h1><h3 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h3><p>Redis的官网为: <a href="http://redis.io/" target="_blank" rel="noopener">http://redis.io/</a>，下载测试即可（在开启Redis服务后，注意测试数据库的时候可能需要管理员权限）。</p><p>参考博客：<a href="http://www.cnblogs.com/zhangweizhong/p/4969240.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhangweizhong/p/4969240.html</a></p><h3 id="C-调用Redis"><a href="#C-调用Redis" class="headerlink" title="C#调用Redis"></a>C#调用Redis</h3><p>​          Redis官网提供了很多开源的C#客户端。例如，Nhiredis ，ServiceStack.Redis ，StackExchange.Redis等。其中ServiceStack.Redis应该算是比较流行的。它提供了一整套从Redis数据结构都强类型对象转换的机制并将对象json序列化。所以这里只介绍ServiceStack.Redis，它也是目前我们产品中所使用的客户端。 </p><p>参考博客：<a href="https://www.cnblogs.com/zhangweizhong/p/4972348.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangweizhong/p/4972348.html</a></p><a id="more"></a><h3 id="C-与Redis的消息队列通信"><a href="#C-与Redis的消息队列通信" class="headerlink" title="C#与Redis的消息队列通信"></a>C#与Redis的消息队列通信</h3><p>​       运行 redis 服务，如果已经运行，则无需重复运行，在用管理员模式分别打开两个命令窗口，并切换到 redis工作目录，执行客户端模式命令 subscribe和publish，分别表示消费者和生产者。</p><p>​      其中，SUBSCRIBE 命令是建立监听，参数是通道名称 PUBLISH 命令是给指定通道发送消息 </p><p>​      在vs创建命令行程序，并引入nuget包: StackExchange.Redis，代码测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        static ConnectionMultiplexer redisClient = ConnectionMultiplexer.Connect(&quot;localhost&quot;);</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            IDatabase db = redisClient.GetDatabase();</span><br><span class="line">            // 测试 key value</span><br><span class="line">            string value = &quot;abcdefg&quot;;</span><br><span class="line">            db.StringSet(&quot;mykey&quot;, value);</span><br><span class="line">             value = db.StringGet(&quot;mykey&quot;);</span><br><span class="line">            Console.WriteLine(value);</span><br><span class="line">            // 测试消息队列</span><br><span class="line">            ISubscriber sub = redisClient.GetSubscriber();</span><br><span class="line">            sub.Subscribe(&quot;messages&quot;, (channel, message) =&gt; &#123;</span><br><span class="line">                Console.WriteLine((string)message);</span><br><span class="line">            &#125;);</span><br><span class="line">            Thread.Sleep(1000);</span><br><span class="line">            sub.Publish(&quot;messages&quot;, &quot;hello&quot;);</span><br><span class="line"></span><br><span class="line">            Thread.Sleep(1000);</span><br><span class="line">            sub.Publish(&quot;redisMessages&quot;, &quot;This message from C# program&quot;);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redis学习（一）&quot;&gt;&lt;a href=&quot;#Redis学习（一）&quot; class=&quot;headerlink&quot; title=&quot;Redis学习（一）&quot;&gt;&lt;/a&gt;Redis学习（一）&lt;/h1&gt;&lt;h3 id=&quot;Redis安装&quot;&gt;&lt;a href=&quot;#Redis安装&quot; class=&quot;headerlink&quot; title=&quot;Redis安装&quot;&gt;&lt;/a&gt;Redis安装&lt;/h3&gt;&lt;p&gt;Redis的官网为: &lt;a href=&quot;http://redis.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://redis.io/&lt;/a&gt;，下载测试即可（在开启Redis服务后，注意测试数据库的时候可能需要管理员权限）。&lt;/p&gt;
&lt;p&gt;参考博客：&lt;a href=&quot;http://www.cnblogs.com/zhangweizhong/p/4969240.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cnblogs.com/zhangweizhong/p/4969240.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;C-调用Redis&quot;&gt;&lt;a href=&quot;#C-调用Redis&quot; class=&quot;headerlink&quot; title=&quot;C#调用Redis&quot;&gt;&lt;/a&gt;C#调用Redis&lt;/h3&gt;&lt;p&gt;​          Redis官网提供了很多开源的C#客户端。例如，Nhiredis ，ServiceStack.Redis ，StackExchange.Redis等。其中ServiceStack.Redis应该算是比较流行的。它提供了一整套从Redis数据结构都强类型对象转换的机制并将对象json序列化。所以这里只介绍ServiceStack.Redis，它也是目前我们产品中所使用的客户端。 &lt;/p&gt;
&lt;p&gt;参考博客：&lt;a href=&quot;https://www.cnblogs.com/zhangweizhong/p/4972348.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/zhangweizhong/p/4972348.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Redis学习" scheme="http://yoursite.com/tags/Redis%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo输入SSH Key</title>
    <link href="http://yoursite.com/2019/01/13/Hexo/Hexo-SSH%E7%A7%98%E9%92%A5/"/>
    <id>http://yoursite.com/2019/01/13/Hexo/Hexo-SSH秘钥/</id>
    <published>2019-01-13T14:03:32.794Z</published>
    <updated>2019-01-13T14:19:25.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置-SSH-使用-Hexo-deploy-时免输用户名密码"><a href="#设置-SSH-使用-Hexo-deploy-时免输用户名密码" class="headerlink" title="设置 SSH 使用 Hexo deploy 时免输用户名密码"></a>设置 SSH 使用 Hexo deploy 时免输用户名密码</h1><hr><p>SSH 验证就是我们键入命令 <code>hexo deploy</code> 以后，当那些需要提交的内容显示完成过后会弹出的一个小窗口提示我们输入用户名、密码。</p><p>当然，我们可以在电脑中设置SSH Key实现免密码输入。</p><a id="more"></a><p>1.检查是否有SSH秘钥</p><p>登陆github，点击头像位置处 Settings ——&gt; SSH and GPG keys ，查看是否有SSH keys。如果有，直接跳到第3步；如果没有，则继续。 </p><p>2.新建SSH秘钥，执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"邮箱名"</span></span><br></pre></td></tr></table></figure><p>然后出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/John/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>回车即可，之后会出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>要求你输入密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。</p><p>注意：输入密码的时候没有*字样的，直接输入就好。</p><p>然后会出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/John/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/John/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">65:69:······02:4b emailname@email.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+--[ RSA 2048]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|       .   o .   |</span></span><br><span class="line"><span class="string">|    . o o = o    |</span></span><br><span class="line"><span class="string">|   . o * = o     |</span></span><br><span class="line"><span class="string">|  E  o + o .     |</span></span><br><span class="line"><span class="string">| . o.   . .      |</span></span><br><span class="line"><span class="string">|     ..          |</span></span><br><span class="line"><span class="string">+-----------------+</span></span><br></pre></td></tr></table></figure><p>至此，密钥已经成功生成。 </p><p>3.在github上添加SSH key</p><p>此处有2种方法：</p><ul><li><p>在用户设置中添加密钥（Settings –&gt; SSH GPG keys）</p></li><li><p>在单个项目中添加密钥(在单个项目的首页菜单栏中点击 Settings –&gt; Deploy keys –&gt; Add deploy key，然后将生成的 id_rsa.pub 中的内容全选复制到 key 输入框中，然后点击 Add key 完成添加公钥。)</p></li></ul><p>对于在用户设置中添加秘钥，具体操作如下：</p><ul><li>打开本地文件：id_rsa.pub（文件路径可以在上一步SSH生成成功后看到路径，比如我的是c/Users/John/.ssh/id_rsa.pub），可以将这个文件在编辑器中打开，然后全选复制。</li><li>登陆github，点击头像位置处 Settings ——&gt; SSH and GPG keys ——&gt; New SSH key，点击新建SSH key。</li><li>将之前复制的内容粘贴在key文本框里，title可以不用填（或者自己起一个名字也可以）。</li></ul><p>4.测试设置是否成功<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设置-SSH-使用-Hexo-deploy-时免输用户名密码&quot;&gt;&lt;a href=&quot;#设置-SSH-使用-Hexo-deploy-时免输用户名密码&quot; class=&quot;headerlink&quot; title=&quot;设置 SSH 使用 Hexo deploy 时免输用户名密码&quot;&gt;&lt;/a&gt;设置 SSH 使用 Hexo deploy 时免输用户名密码&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;SSH 验证就是我们键入命令 &lt;code&gt;hexo deploy&lt;/code&gt; 以后，当那些需要提交的内容显示完成过后会弹出的一个小窗口提示我们输入用户名、密码。&lt;/p&gt;
&lt;p&gt;当然，我们可以在电脑中设置SSH Key实现免密码输入。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo换电脑重新部署</title>
    <link href="http://yoursite.com/2019/01/13/Hexo/Hexo%E6%8D%A2%E7%94%B5%E8%84%91%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2019/01/13/Hexo/Hexo换电脑重新部署/</id>
    <published>2019-01-13T12:50:21.219Z</published>
    <updated>2019-01-13T13:23:59.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="换电脑如何在重新部署hexo"><a href="#换电脑如何在重新部署hexo" class="headerlink" title="换电脑如何在重新部署hexo"></a>换电脑如何在重新部署hexo</h1><hr><a id="more"></a><p>1.将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录：</p>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><p>   将这些目录放在一个目录下，如 Hexo /</p><p>2.配置Hexo环境：安装Node.js</p><p>3.安装Hexo，执行命令如下：</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>   不过，由于默认的NPM服务器太慢，我们可以把源替换成淘宝的镜像，在终端中执行如下命令：</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry <span class="string">"https://registry.npm.taobao.org"</span></span><br></pre></td></tr></table></figure><p>   这里需要注意的是，这一次的切换时暂时的，如果下回从npm下载一些东西还是觉得非常慢，记得再次执行一次这一条命令。</p><p>4.模块安装<br>   进入保存的目录，如Hexo \目录，执行命令：<br>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></p><p>5.部署，执行命令<br>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>6.测试<br>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;换电脑如何在重新部署hexo&quot;&gt;&lt;a href=&quot;#换电脑如何在重新部署hexo&quot; class=&quot;headerlink&quot; title=&quot;换电脑如何在重新部署hexo&quot;&gt;&lt;/a&gt;换电脑如何在重新部署hexo&lt;/h1&gt;&lt;hr&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo插入图片</title>
    <link href="http://yoursite.com/2018/09/22/Hexo/Hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2018/09/22/Hexo/Hexo插入图片/</id>
    <published>2018-09-22T13:28:07.636Z</published>
    <updated>2018-09-22T13:37:51.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在hexo文章中插入图片"><a href="#如何在hexo文章中插入图片" class="headerlink" title="如何在hexo文章中插入图片"></a>如何在hexo文章中插入图片</h1><hr><a id="more"></a><p>对于hexo，有两种方式： </p><ol><li>使用本地路径：在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。 </li><li>使用微博图床，<a href="http://weibotuchuang.sinaapp.com/" target="_blank" rel="noopener">链接地址</a> 将图片拖入区域中，会生成图片的URL。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何在hexo文章中插入图片&quot;&gt;&lt;a href=&quot;#如何在hexo文章中插入图片&quot; class=&quot;headerlink&quot; title=&quot;如何在hexo文章中插入图片&quot;&gt;&lt;/a&gt;如何在hexo文章中插入图片&lt;/h1&gt;&lt;hr&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Marlin study</title>
    <link href="http://yoursite.com/2018/09/22/Marlin/Marlin%20study/"/>
    <id>http://yoursite.com/2018/09/22/Marlin/Marlin study/</id>
    <published>2018-09-22T13:04:04.303Z</published>
    <updated>2018-09-22T13:25:49.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Marlin-源码学习"><a href="#Marlin-源码学习" class="headerlink" title="Marlin 源码学习"></a>Marlin 源码学习</h1><h3 id="从网上看到的Marlin固件的源码解析，其以裁剪移植的STM32的程序进行分析如下"><a href="#从网上看到的Marlin固件的源码解析，其以裁剪移植的STM32的程序进行分析如下" class="headerlink" title="从网上看到的Marlin固件的源码解析，其以裁剪移植的STM32的程序进行分析如下"></a>从网上看到的Marlin固件的源码解析，其以裁剪移植的STM32的程序进行分析如下</h3><p><img src="/img/Marlin1.jpg" alt="Marlin1"><br><a id="more"></a></p><p><img src="/img/Marlin2.jpg" alt="Marlin2"></p><p><img src="/img/Marlin3.jpg" alt="Marlin3"></p><p><img src="/img/Marlin4.jpg" alt="Marlin4"></p><p><img src="/img/Marlin5.jpg" alt="Marlin5"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Marlin-源码学习&quot;&gt;&lt;a href=&quot;#Marlin-源码学习&quot; class=&quot;headerlink&quot; title=&quot;Marlin 源码学习&quot;&gt;&lt;/a&gt;Marlin 源码学习&lt;/h1&gt;&lt;h3 id=&quot;从网上看到的Marlin固件的源码解析，其以裁剪移植的STM32的程序进行分析如下&quot;&gt;&lt;a href=&quot;#从网上看到的Marlin固件的源码解析，其以裁剪移植的STM32的程序进行分析如下&quot; class=&quot;headerlink&quot; title=&quot;从网上看到的Marlin固件的源码解析，其以裁剪移植的STM32的程序进行分析如下&quot;&gt;&lt;/a&gt;从网上看到的Marlin固件的源码解析，其以裁剪移植的STM32的程序进行分析如下&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/img/Marlin1.jpg&quot; alt=&quot;Marlin1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Marlin" scheme="http://yoursite.com/tags/Marlin/"/>
    
  </entry>
  
  <entry>
    <title>GitHub for windows无法启动</title>
    <link href="http://yoursite.com/2018/04/29/github/problem%20for%20github%20install/"/>
    <id>http://yoursite.com/2018/04/29/github/problem for github install/</id>
    <published>2018-04-29T14:30:16.664Z</published>
    <updated>2018-04-29T15:47:29.061Z</updated>
    
    <content type="html"><![CDATA[<p>已经不知是第几次遇到这个GitHub for windows 客户端没法启动的问题了，每次都是要Google,在这里标记一下</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><a id="more"></a><h3 id="系统为Windows-XP"><a href="#系统为Windows-XP" class="headerlink" title="系统为Windows XP"></a>系统为Windows XP</h3><p>当你的系统是Windows XP时，进入用户目录下的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%userprofile%\Local Settings\Apps (例如：C:\Documents &amp; Settings\Username\Local Settings\Apps)</span><br></pre></td></tr></table></figure><h3 id="系统为Windows-7以上"><a href="#系统为Windows-7以上" class="headerlink" title="系统为Windows 7以上"></a>系统为Windows 7以上</h3><p>当你的系统是 Windows 7时，进入用户目录下的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%userprofile%\AppData\Local\Apps (例如：C:\users\Username\AppData\Local\Apps)</span><br></pre></td></tr></table></figure><p>进入以上目录后，删除 2.0 这个文件夹,然后就OK了！</p><p>解决方法参考地址：<a href="http://superuser.com/questions/483515/github-for-windows-install-error" target="_blank" rel="noopener">http://superuser.com/questions/483515/github-for-windows-install-error</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;已经不知是第几次遇到这个GitHub for windows 客户端没法启动的问题了，每次都是要Google,在这里标记一下&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-test</title>
    <link href="http://yoursite.com/2018/04/25/Hexo/hello-world/"/>
    <id>http://yoursite.com/2018/04/25/Hexo/hello-world/</id>
    <published>2018-04-25T13:49:24.106Z</published>
    <updated>2018-04-29T15:25:15.676Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
